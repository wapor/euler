#!/usr/bin/python

# The sequence of triangle numbers is generated by adding the natural
# numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
# 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
#  10: 1,2,5,10
#  15: 1,3,5,15
#  21: 1,3,7,21
#  28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred
# divisors?


import math
import primes

# Return list of lists of primes for the number "num"
def factorize(num, primes):
    factors = []
    for prime in primes:
        if num % prime == 0:
            ff = []
            while num % prime == 0:
                ff.append(prime)
                num /= prime
            factors.append(ff)
            if num <= 1:
                break
    else:
        exit("Not enough primes for num %d" % num)
    return factors
            
primes = primes.Primes(100000).as_list()
limit = 20000

# brutforce
for k in range(2, limit):
    t = k * (k + 1) / 2   # triangle number for k
    factors = factorize(t, primes)
    divizors = 1
    for f in factors:
        divizors *= len(f) + 1
    # print "factors for t:", t, " are:", factors, "divizors: ", divizors
    if divizors > 500:
        exit("Answer: %d" % t)
    
# this can be improved since k and k + 1 are co-primes (no common divizors)
# so factorization need to be done only for k and k + 1 (reusing k + 1 for next iteration).
